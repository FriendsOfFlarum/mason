{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@fof/mason/webpack/bootstrap","webpack://@fof/mason/webpack/runtime/compat get default export","webpack://@fof/mason/webpack/runtime/define property getters","webpack://@fof/mason/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/mason/webpack/runtime/make namespace object","webpack://@fof/mason/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/mason/./src/common/models/Answer.ts","webpack://@fof/mason/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@fof/mason/./src/common/models/Field.ts","webpack://@fof/mason/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/Component']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@fof/mason/./src/common/helpers/sortByAttribute.ts","webpack://@fof/mason/./src/forum/components/FieldEditDropdown.js","webpack://@fof/mason/./src/forum/components/FieldEditText.js","webpack://@fof/mason/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@fof/mason/./src/forum/components/FieldEditTags.js","webpack://@fof/mason/./src/forum/components/FieldGrid.js","webpack://@fof/mason/./src/forum/helpers/chunkArray.ts","webpack://@fof/mason/./src/forum/components/FieldsEditor.js","webpack://@fof/mason/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@fof/mason/./src/forum/components/FieldsEditorModal.js","webpack://@fof/mason/external root \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@fof/mason/./src/forum/components/FieldsViewer.js","webpack://@fof/mason/external root \"flarum.core.compat['common/components/CommentPost']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@fof/mason/./src/forum/index.js","webpack://@fof/mason/./src/forum/addComposerFields.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@fof/mason/./src/forum/addFieldUpdateControl.js","webpack://@fof/mason/./src/forum/patchModelIdentifier.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Model from 'flarum/common/Model';\nimport Field from './Field';\n\nexport default class Answer extends Model {\n    content = Model.attribute<string>('content');\n    is_suggested = Model.attribute<boolean>('is_suggested');\n    sort = Model.attribute<number | null>('sort');\n    field = Model.hasOne<Field>('field');\n\n    apiEndpoint() {\n        return '/fof/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\nimport Answer from './Answer';\n\nexport default class Field extends Model {\n    name = Model.attribute<string>('name');\n    description = Model.attribute<string | null>('description');\n    min_answers_count = Model.attribute<number>('min_answers_count');\n    max_answers_count = Model.attribute<number>('max_answers_count');\n    show_when_empty = Model.attribute<boolean>('show_when_empty');\n    user_values_allowed = Model.attribute<boolean>('user_values_allowed');\n    validation = Model.attribute<string | null>('validation');\n    icon = Model.attribute<string | null>('icon');\n    sort = Model.attribute<number | null>('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    allAnswers = Model.hasMany<Answer>('allAnswers');\n    suggestedAnswers = Model.hasMany<Answer>('suggestedAnswers');\n    required = computed<boolean>('min_answers_count', (min_answers_count) => min_answers_count > 0);\n    multiple = computed<boolean>('max_answers_count', (max_answers_count) => max_answers_count > 1);\n\n    apiEndpoint() {\n        return '/fof/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\n    if (!attr) attr = 'sort';\n    return items.sort((a, b) => a[attr]() - b[attr]());\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    view(vnode) {\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\n        const { field, answers, onchange } = vnode.attrs;\n\n        let selectedAnswerIdsForThisField = [];\n\n        (field.suggestedAnswers() || []).forEach((answer) => {\n            const answerIndex = answers.findIndex((a) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        return (\n            <span className=\"Select\">\n                <select\n                    className=\"Select-input FormControl\"\n                    multiple={field.multiple()}\n                    onchange={(event) => {\n                        let answers = [];\n\n                        for (let option of event.target.options) {\n                            if (option.selected && option.value !== 'none') {\n                                const answerId = option.value;\n\n                                // This will only work with suggested answers for now\n                                // As they are the only ones registered in the store\n                                answers.push(app.store.getById('mason-answers', answerId));\n                            }\n                        }\n\n                        onchange(answers);\n                    }}\n                >\n                    {!field.multiple() && (\n                        <option\n                            value=\"none\"\n                            selected={selectedAnswerIdsForThisField.length === 0}\n                            disabled={field.required()}\n                            hidden={this.placeholderHidden(field)}\n                        >\n                            {this.selectPlaceholder(field)}\n                        </option>\n                    )}\n                    {sortByAttribute(field.suggestedAnswers() || []).map((answer) => (\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\n                            {answer.content()}\n                        </option>\n                    ))}\n                </select>\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\n            </span>\n        );\n    }\n\n    placeholderHidden(field) {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return field.required();\n    }\n\n    selectPlaceholder(field) {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += field.name();\n\n            if (field.required()) {\n                text += ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (field.required()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Component from 'flarum/common/Component';\n\nexport default class FieldEditText extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.field = this.attrs.field;\n        this.answers = this.attrs.answers;\n        this.onchange = this.attrs.onchange;\n\n        this.content = '';\n\n        const answersForThisField = this.answers.filter((answer) => {\n            // Temporary store entries seem to turn into undefined after saving\n            if (typeof answer === 'undefined') {\n                return false;\n            }\n\n            return answer.field().id() === this.field.id();\n        });\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return (\n            <input\n                className=\"FormControl\"\n                required={this.field.required()}\n                value={this.content}\n                oninput={(e) => {\n                    this.content = e.target.value;\n\n                    if (this.content === '') {\n                        this.onchange([]);\n                    } else {\n                        const answer = app.store.createRecord('mason-answers', {\n                            attributes: {\n                                content: this.content,\n                            },\n                            relationships: {\n                                field: {\n                                    data: Model.getIdentifier(this.field),\n                                },\n                            },\n                        });\n\n                        this.onchange([answer]);\n                    }\n                }}\n                placeholder={this.fieldPlaceholder()}\n            />\n        );\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/utils/sortTags'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\nimport classList from 'flarum/common/utils/classList';\n\nexport default class DiscussionFields extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.attrs.discussion) {\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.attrs.discussion.tags();\n        } else {\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n\n        this.inputUuid = Math.random().toString(36).substring(2);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return <div className=\"Alert\">{app.translator.trans('fof-mason.forum.tags.inadequate-settings')}</div>;\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\n        const inputUuid = this.inputUuid;\n        const required = this.fieldRequired();\n\n        return (\n            <div\n                className={classList('Mason-Field Form-group', {\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('fof-mason.labels-as-placeholders'),\n                })}\n            >\n                <label for={`fofMason-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\n                <span className=\"Select\">\n                    <select\n                        className=\"Select-input FormControl\"\n                        id={`fofMason-selectInput-${inputUuid}`}\n                        onchange={(event) => {\n                            const id = event.target.value;\n\n                            this.selectedTags = [];\n\n                            if (id !== 'none') {\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\n\n                                const parent = this.selectedTags[0].parent();\n                                if (parent) {\n                                    this.selectedTags.push(parent);\n                                }\n                            }\n\n                            this.attrs.onchange(this.selectedTags);\n                        }}\n                    >\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\n                            {this.selectPlaceholder()}\n                        </option>\n                        {this.tags.map((tag) => {\n                            const parent = tag.parent();\n\n                            return (\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\n                                </option>\n                            );\n                        })}\n                        ,\n                    </select>\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\n                </span>\n            </div>\n        );\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('fof-mason.tags-field-name') || app.translator.trans('fof-mason.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport chunkArray from '../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return (\n            <div className=\"Mason-Grid-Wrapper\">\n                <div className=\"Mason-Grid\">\n                    {chunkArray(this.attrs.items, app.forum.attribute('fof-mason.column-count')).map((row) => (\n                        <div className=\"Mason-Row\">\n                            {row.map((item) => (\n                                <div className=\"Mason-Column\" {...item} />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size.\n *\n * Useful for grid layouts.\n *\n * @see https://stackoverflow.com/a/64777515/11091039\n * @param arr Array of items\n * @param size Number of items per array\n */\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\n    return Array(Math.ceil(arr.length / size))\n        .fill(undefined)\n        .map((_, i) => arr.slice(size * i, size + size * i));\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditor extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            const answers = field.suggestedAnswers();\n\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\n            // where we log a warning if the relationship appears to be missing\n            // This should help troubleshooting what happens if no answers are offered\n            if (!Array.isArray(answers)) {\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\n\n                return;\n            }\n\n            answers.forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('fof-mason.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.tags-as-fields')) {\n            items.add(\n                'tags',\n                <FieldEditTags\n                    discussion={this.attrs.discussion}\n                    onchange={(tags) => {\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\n                    }}\n                />\n            );\n        }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div\n                    class={classList('Mason-Field Form-group', {\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('fof-mason.labels-as-placeholders'),\n                    })}\n                >\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                        {field.required() ? ' *' : null}\n                    </label>\n                    {input}\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditor from './FieldsEditor';\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n\n        // Stays null if the feature is not used\n        this.tags = null;\n    }\n\n    title() {\n        return app.translator.trans('fof-mason.forum.answers-modal.edit-title', {\n            title: <em>{this.attrs.discussion.title()}</em>,\n        });\n    }\n\n    content() {\n        return (\n            <>\n                <div className=\"Modal-body\">\n                    <FieldsEditor\n                        discussion={this.attrs.discussion} // Only for the tags feature\n                        answers={this.answers}\n                        onchange={this.answersChanged.bind(this)}\n                        ontagchange={(tags) => {\n                            this.tags = tags;\n                            this.dirty = true;\n                        }}\n                    />\n                </div>\n                <div className=\"Modal-footer\">\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\n                        {app.translator.trans('fof-mason.forum.answers-modal.save')}\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let relationships = {\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        if (this.tags !== null) {\n            relationships.tags = this.tags;\n        }\n\n        // Use a temporary discussion object\n        // Otherwise Flarum persists the relationships to the model while the request is still processing\n        // Which causes errors with components outside of the modal redrawing and reading non-persisted data\n        // The real discussion will be updated automatically by the store once the request completes which is all we need\n        const temporaryDiscussion = app.store.createRecord('discussions');\n        temporaryDiscussion.pushData({ id: this.attrs.discussion.id() });\n        temporaryDiscussion.exists = true;\n\n        temporaryDiscussion\n            .save({\n                relationships,\n            })\n            .then(() => {\n                this.processing = false;\n                app.modal.close();\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n                throw err;\n            });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionHero'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.attrs.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('fof-mason.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return <div />;\n        }\n\n        return (\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\n                {head}\n                <FieldGrid items={fields} />\n            </div>\n        );\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'edit',\n                <Button\n                    className=\"Button Mason-Fields--edit\"\n                    icon=\"fas fa-pen\"\n                    onclick={() =>\n                        app.modal.show(FieldsEditorModal, {\n                            discussion: this.discussion,\n                        })\n                    }\n                >\n                    {app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('fof-mason.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach((field) => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(\n                (this.discussion.masonAnswers() || []).filter((answer) => {\n                    // It's necessary to compare the field() relationship\n                    // Because field.suggestedAnswers() won't contain new and user answers\n                    return answer.field() && answer.field().id() === field.id();\n                })\n            );\n\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('fof-mason.forum.post-answers.no-answer')}</em>);\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div className=\"Mason-Field Form-group\">\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                    </label>\n                    <div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionPage'];","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/common/components/CommentPost';\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\n    if (!app.current.matches(DiscussionPage)) {\n        return false;\n    }\n\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('fof-mason.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'oninit', function () {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return (this.attrs.post.discussion().masonAnswers() || [])\n                .map((answer) => {\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\n                    if (!answer) {\n                        return '';\n                    }\n\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\n                    return JSON.stringify([answer.id(), !!answer.field()]);\n                })\n                .join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport Answer from '@common/models/Answer';\nimport Field from '@common/models/Field';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from './patchModelIdentifier';\n\napp.initializers.add('fof-mason', (app) => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\nimport FieldsEditor from './components/FieldsEditor';\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        items.add(\n            'mason-fields',\n            <FieldsEditor\n                answers={this.composer.fields.masonAnswers || []}\n                onchange={(answers) => {\n                    this.composer.fields.masonAnswers = answers;\n                }}\n                ontagchange={(tags) => {\n                    this.composer.fields.tags = tags;\n                }}\n            />\n        );\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields() || !this.composer.fields.masonAnswers) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.composer.fields.masonAnswers;\n    });\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('fof-mason.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'mason-update-answers',\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\n                    {app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n    });\n}\n","import { override } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Answer from '@common/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Answer","content","Model","is_suggested","sort","field","apiEndpoint","this","exists","data","id","Field","name","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","allAnswers","suggestedAnswers","required","computed","multiple","sortByAttribute","items","attr","b","FieldEditDropdown","view","vnode","attrs","answers","onchange","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","className","event","target","options","option","selected","answerId","app","length","disabled","hidden","placeholderHidden","selectPlaceholder","map","indexOf","text","Component","FieldEditText","oninit","answersForThisField","filter","oninput","e","attributes","relationships","placeholder","fieldPlaceholder","DiscussionFields","tags","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","inputUuid","Math","random","toString","substring","currentSelectedChild","parent","fieldRequired","classList","for","fieldLabel","find","FieldGrid","arr","size","Array","ceil","fill","undefined","_","i","slice","row","item","FieldsEditor","fields","answerToFieldIndex","isArray","console","warn","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","concat","ItemList","add","ontagchange","input","inputAttrs","class","FieldsEditorModal","masonAnswers","dirty","processing","title","answersChanged","loading","onclick","saveAnswers","temporaryDiscussion","pushData","save","then","m","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","answer_list","showFieldsOnPost","post","DiscussionPage","number","store","models","Discussion","Forum","extend","DiscussionComposer","composer","DiscussionHero","canSeeMasonAnswers","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","override","original","model","type"],"sourceRoot":""}