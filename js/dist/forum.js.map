{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@fof/mason/webpack/bootstrap","webpack://@fof/mason/webpack/runtime/compat get default export","webpack://@fof/mason/webpack/runtime/define property getters","webpack://@fof/mason/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/mason/webpack/runtime/make namespace object","webpack://@fof/mason/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/mason/./src/common/models/Answer.ts","webpack://@fof/mason/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@fof/mason/./src/common/models/Field.ts","webpack://@fof/mason/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/Component']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@fof/mason/./src/common/helpers/sortByAttribute.ts","webpack://@fof/mason/./src/forum/components/FieldEditDropdown.js","webpack://@fof/mason/./src/forum/components/FieldEditText.js","webpack://@fof/mason/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@fof/mason/./src/forum/components/FieldEditTags.js","webpack://@fof/mason/./src/forum/components/FieldGrid.js","webpack://@fof/mason/./src/forum/helpers/chunkArray.ts","webpack://@fof/mason/./src/forum/components/FieldsEditor.js","webpack://@fof/mason/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@fof/mason/./src/forum/components/FieldsEditorModal.js","webpack://@fof/mason/external root \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@fof/mason/./src/forum/components/FieldsViewer.js","webpack://@fof/mason/external root \"flarum.core.compat['common/components/CommentPost']\"","webpack://@fof/mason/external root \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@fof/mason/./src/forum/index.js","webpack://@fof/mason/./src/forum/addComposerFields.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@fof/mason/./src/forum/addFieldUpdateControl.js","webpack://@fof/mason/./src/forum/patchModelIdentifier.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Model from 'flarum/common/Model';\nimport Field from './Field';\n\nexport default class Answer extends Model {\n    content = Model.attribute<string>('content');\n    is_suggested = Model.attribute<boolean>('is_suggested');\n    sort = Model.attribute<number | null>('sort');\n    field = Model.hasOne<Field>('field');\n\n    apiEndpoint() {\n        return '/fof/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\nimport Answer from './Answer';\n\nexport default class Field extends Model {\n    name = Model.attribute<string>('name');\n    description = Model.attribute<string | null>('description');\n    min_answers_count = Model.attribute<number>('min_answers_count');\n    max_answers_count = Model.attribute<number>('max_answers_count');\n    show_when_empty = Model.attribute<boolean>('show_when_empty');\n    user_values_allowed = Model.attribute<boolean>('user_values_allowed');\n    validation = Model.attribute<string | null>('validation');\n    icon = Model.attribute<string | null>('icon');\n    sort = Model.attribute<number | null>('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    allAnswers = Model.hasMany<Answer>('allAnswers');\n    suggestedAnswers = Model.hasMany<Answer>('suggestedAnswers');\n    required = computed<boolean>('min_answers_count', (min_answers_count) => min_answers_count > 0);\n    multiple = computed<boolean>('max_answers_count', (max_answers_count) => max_answers_count > 1);\n\n    apiEndpoint() {\n        return '/fof/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\n    if (!attr) attr = 'sort';\n    return items.sort((a, b) => a[attr]() - b[attr]());\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    view(vnode) {\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\n        const { field, answers, onchange } = vnode.attrs;\n\n        let selectedAnswerIdsForThisField = [];\n\n        (field.suggestedAnswers() || []).forEach((answer) => {\n            const answerIndex = answers.findIndex((a) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        return (\n            <span className=\"Select\">\n                <select\n                    className=\"Select-input FormControl\"\n                    multiple={field.multiple()}\n                    onchange={(event) => {\n                        let answers = [];\n\n                        for (let option of event.target.options) {\n                            if (option.selected && option.value !== 'none') {\n                                const answerId = option.value;\n\n                                // This will only work with suggested answers for now\n                                // As they are the only ones registered in the store\n                                answers.push(app.store.getById('mason-answers', answerId));\n                            }\n                        }\n\n                        onchange(answers);\n                    }}\n                >\n                    {!field.multiple() && (\n                        <option\n                            value=\"none\"\n                            selected={selectedAnswerIdsForThisField.length === 0}\n                            disabled={field.required()}\n                            hidden={this.placeholderHidden(field)}\n                        >\n                            {this.selectPlaceholder(field)}\n                        </option>\n                    )}\n                    {sortByAttribute(field.suggestedAnswers() || []).map((answer) => (\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\n                            {answer.content()}\n                        </option>\n                    ))}\n                </select>\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\n            </span>\n        );\n    }\n\n    placeholderHidden(field) {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return field.required();\n    }\n\n    selectPlaceholder(field) {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += field.name();\n\n            if (field.required()) {\n                text += ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (field.required()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Component from 'flarum/common/Component';\n\nexport default class FieldEditText extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.field = this.attrs.field;\n        this.answers = this.attrs.answers;\n        this.onchange = this.attrs.onchange;\n\n        this.content = '';\n\n        const answersForThisField = this.answers.filter((answer) => {\n            // Temporary store entries seem to turn into undefined after saving\n            if (typeof answer === 'undefined') {\n                return false;\n            }\n\n            return answer.field().id() === this.field.id();\n        });\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return (\n            <input\n                className=\"FormControl\"\n                required={this.field.required()}\n                value={this.content}\n                oninput={(e) => {\n                    this.content = e.target.value;\n\n                    if (this.content === '') {\n                        this.onchange([]);\n                    } else {\n                        const answer = app.store.createRecord('mason-answers', {\n                            attributes: {\n                                content: this.content,\n                            },\n                            relationships: {\n                                field: {\n                                    data: Model.getIdentifier(this.field),\n                                },\n                            },\n                        });\n\n                        this.onchange([answer]);\n                    }\n                }}\n                placeholder={this.fieldPlaceholder()}\n            />\n        );\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/utils/sortTags'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\nimport classList from 'flarum/common/utils/classList';\n\nexport default class DiscussionFields extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.attrs.discussion) {\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.attrs.discussion.tags();\n        } else {\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n\n        this.inputUuid = Math.random().toString(36).substring(2);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return <div className=\"Alert\">{app.translator.trans('fof-mason.forum.tags.inadequate-settings')}</div>;\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\n        const inputUuid = this.inputUuid;\n        const required = this.fieldRequired();\n\n        return (\n            <div\n                className={classList('Mason-Field Form-group', {\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('fof-mason.labels-as-placeholders'),\n                })}\n            >\n                <label for={`fofMason-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\n                <span className=\"Select\">\n                    <select\n                        className=\"Select-input FormControl\"\n                        id={`fofMason-selectInput-${inputUuid}`}\n                        onchange={(event) => {\n                            const id = event.target.value;\n\n                            this.selectedTags = [];\n\n                            if (id !== 'none') {\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\n\n                                const parent = this.selectedTags[0].parent();\n                                if (parent) {\n                                    this.selectedTags.push(parent);\n                                }\n                            }\n\n                            this.attrs.onchange(this.selectedTags);\n                        }}\n                    >\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\n                            {this.selectPlaceholder()}\n                        </option>\n                        {this.tags.map((tag) => {\n                            const parent = tag.parent();\n\n                            return (\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\n                                </option>\n                            );\n                        })}\n                        ,\n                    </select>\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\n                </span>\n            </div>\n        );\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('fof-mason.tags-field-name') || app.translator.trans('fof-mason.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport chunkArray from '../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return (\n            <div className=\"Mason-Grid-Wrapper\">\n                <div className=\"Mason-Grid\">\n                    {chunkArray(this.attrs.items, app.forum.attribute('fof-mason.column-count')).map((row) => (\n                        <div className=\"Mason-Row\">\n                            {row.map((item) => (\n                                <div className=\"Mason-Column\" {...item} />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size.\n *\n * Useful for grid layouts.\n *\n * @see https://stackoverflow.com/a/64777515/11091039\n * @param arr Array of items\n * @param size Number of items per array\n */\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\n    return Array(Math.ceil(arr.length / size))\n        .fill(undefined)\n        .map((_, i) => arr.slice(size * i, size + size * i));\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditor extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            const answers = field.suggestedAnswers();\n\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\n            // where we log a warning if the relationship appears to be missing\n            // This should help troubleshooting what happens if no answers are offered\n            if (!Array.isArray(answers)) {\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\n\n                return;\n            }\n\n            answers.forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('fof-mason.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.tags-as-fields')) {\n            items.add(\n                'tags',\n                <FieldEditTags\n                    discussion={this.attrs.discussion}\n                    onchange={(tags) => {\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\n                    }}\n                />\n            );\n        }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div\n                    class={classList('Mason-Field Form-group', {\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('fof-mason.labels-as-placeholders'),\n                    })}\n                >\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                        {field.required() ? ' *' : null}\n                    </label>\n                    {input}\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditor from './FieldsEditor';\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n\n        // Stays null if the feature is not used\n        this.tags = null;\n    }\n\n    title() {\n        return app.translator.trans('fof-mason.forum.answers-modal.edit-title', {\n            title: <em>{this.attrs.discussion.title()}</em>,\n        });\n    }\n\n    content() {\n        return (\n            <>\n                <div className=\"Modal-body\">\n                    <FieldsEditor\n                        discussion={this.attrs.discussion} // Only for the tags feature\n                        answers={this.answers}\n                        onchange={this.answersChanged.bind(this)}\n                        ontagchange={(tags) => {\n                            this.tags = tags;\n                            this.dirty = true;\n                        }}\n                    />\n                </div>\n                <div className=\"Modal-footer\">\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\n                        {app.translator.trans('fof-mason.forum.answers-modal.save')}\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let relationships = {\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        if (this.tags !== null) {\n            relationships.tags = this.tags;\n        }\n\n        // Use a temporary discussion object\n        // Otherwise Flarum persists the relationships to the model while the request is still processing\n        // Which causes errors with components outside of the modal redrawing and reading non-persisted data\n        // The real discussion will be updated automatically by the store once the request completes which is all we need\n        const temporaryDiscussion = app.store.createRecord('discussions');\n        temporaryDiscussion.pushData({ id: this.attrs.discussion.id() });\n        temporaryDiscussion.exists = true;\n\n        temporaryDiscussion\n            .save({\n                relationships,\n            })\n            .then(() => {\n                this.processing = false;\n                app.modal.close();\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n                throw err;\n            });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionHero'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.attrs.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('fof-mason.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return <div />;\n        }\n\n        return (\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\n                {head}\n                <FieldGrid items={fields} />\n            </div>\n        );\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'edit',\n                <Button\n                    className=\"Button Mason-Fields--edit\"\n                    icon=\"fas fa-pen\"\n                    onclick={() =>\n                        app.modal.show(FieldsEditorModal, {\n                            discussion: this.discussion,\n                        })\n                    }\n                >\n                    {app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('fof-mason.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach((field) => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(\n                (this.discussion.masonAnswers() || []).filter((answer) => {\n                    // It's necessary to compare the field() relationship\n                    // Because field.suggestedAnswers() won't contain new and user answers\n                    return answer.field() && answer.field().id() === field.id();\n                })\n            );\n\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('fof-mason.forum.post-answers.no-answer')}</em>);\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div className=\"Mason-Field Form-group\">\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                    </label>\n                    <div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionPage'];","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/common/components/CommentPost';\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\n    if (!app.current.matches(DiscussionPage)) {\n        return false;\n    }\n\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('fof-mason.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'oninit', function () {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return (this.attrs.post.discussion().masonAnswers() || [])\n                .map((answer) => {\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\n                    if (!answer) {\n                        return '';\n                    }\n\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\n                    return JSON.stringify([answer.id(), !!answer.field()]);\n                })\n                .join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport Answer from '@common/models/Answer';\nimport Field from '@common/models/Field';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from './patchModelIdentifier';\n\napp.initializers.add('fof-mason', (app) => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\nimport FieldsEditor from './components/FieldsEditor';\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        items.add(\n            'mason-fields',\n            <FieldsEditor\n                answers={this.composer.fields.masonAnswers || []}\n                onchange={(answers) => {\n                    this.composer.fields.masonAnswers = answers;\n                }}\n                ontagchange={(tags) => {\n                    this.composer.fields.tags = tags;\n                }}\n            />\n        );\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields() || !this.composer.fields.masonAnswers) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.composer.fields.masonAnswers;\n    });\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('fof-mason.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'mason-update-answers',\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\n                    {app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n    });\n}\n","import { override } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Answer from '@common/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Answer","_Model","_this","_len","arguments","length","args","Array","_key","apply","concat","content","Model","is_suggested","sort","field","apiEndpoint","this","exists","data","id","Field","name","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","allAnswers","suggestedAnswers","required","computed","multiple","sortByAttribute","items","attr","b","FieldEditDropdown","_Component","_proto","view","vnode","_vnode$attrs","attrs","answers","onchange","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","m","className","event","_step","_iterator","_createForOfIteratorHelperLoose","target","options","done","option","selected","answerId","app","getById","disabled","hidden","placeholderHidden","selectPlaceholder","map","indexOf","attribute","text","trans","Component","FieldEditText","oninit","answersForThisField","filter","_this2","oninput","e","createRecord","attributes","relationships","placeholder","fieldPlaceholder","DiscussionFields","tags","all","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","inputUuid","Math","random","toString","substring","_classList","currentSelectedChild","parent","fieldRequired","classList","for","fieldLabel","find","FieldGrid","arr","size","ceil","fill","undefined","_","i","slice","row","item","assign","FieldsEditor","fields","answerToFieldIndex","isArray","console","warn","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","ItemList","add","_this3","FieldEditTags","ontagchange","input","inputAttrs","class","'['","FieldsEditorModal","_Modal","masonAnswers","dirty","processing","title","answersChanged","Button","loading","onclick","saveAnswers","temporaryDiscussion","pushData","save","then","close","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","show","answer_list","showFieldsOnPost","post","matches","DiscussionPage","number","store","models","Discussion","canSeeMasonAnswers","Forum","canFillMasonFields","extend","DiscussionComposer","composer","DiscussionHero","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","override","original","model","type"],"sourceRoot":""}