{"version":3,"sources":["webpack://@fof/mason/webpack/bootstrap","webpack://@fof/mason/external \"flarum.core.compat['app']\"","webpack://@fof/mason/external \"flarum.core.compat['Model']\"","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/mason/external \"flarum.core.compat['Component']\"","webpack://@fof/mason/external \"flarum.core.compat['extend']\"","webpack://@fof/mason/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/mason/external \"flarum.core.compat['components/Button']\"","webpack://@fof/mason/./src/lib/helpers/sortByAttribute.js","webpack://@fof/mason/external \"flarum.core.compat['utils/mixin']\"","webpack://@fof/mason/external \"flarum.core.compat['utils/ItemList']\"","webpack://@fof/mason/./src/lib/models/Answer.js","webpack://@fof/mason/external \"flarum.core.compat['utils/computed']\"","webpack://@fof/mason/./src/lib/models/Field.js","webpack://@fof/mason/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/mason/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@fof/mason/external \"flarum.core.compat['components/CommentPost']\"","webpack://@fof/mason/external \"flarum.core.compat['models/Forum']\"","webpack://@fof/mason/external \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@fof/mason/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@fof/mason/external \"flarum.core.compat['components/Modal']\"","webpack://@fof/mason/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@fof/mason/./src/forum/components/FieldEditDropdown.js","webpack://@fof/mason/./src/forum/components/FieldEditText.js","webpack://@fof/mason/./src/forum/components/FieldEditTags.js","webpack://@fof/mason/./src/forum/components/FieldGrid.js","webpack://@fof/mason/./src/forum/helpers/chunkArray.js","webpack://@fof/mason/./src/forum/components/FieldsEditor.js","webpack://@fof/mason/./src/forum/components/FieldsEditorModal.js","webpack://@fof/mason/./src/forum/addFieldUpdateControl.js","webpack://@fof/mason/./src/forum/components/FieldsViewer.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@fof/mason/./src/forum/index.js","webpack://@fof/mason/./src/forum/addComposerFields.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@fof/mason/./src/forum/patchModelIdentifier.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","items","attr","sort","a","b","Answer","apiEndpoint","this","exists","data","id","mixin","Model","content","attribute","is_suggested","field","hasOne","Field","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","transformDate","all_answers","hasMany","suggested_answers","required","computed","multiple","FieldEditDropdown","init","props","answers","onchange","view","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","event","target","options","option","selected","answerId","app","store","getById","length","disabled","hidden","placeholderHidden","selectPlaceholder","sortByAttribute","map","indexOf","className","forum","text","translator","trans","Component","FieldEditText","answersForThisField","filter","oninput","withAttr","createRecord","attributes","relationships","getIdentifier","placeholder","fieldPlaceholder","DiscussionFields","tags","all","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","currentSelectedChild","parent","fieldRequired","fieldLabel","find","FieldGrid","itemsPerChunk","R","slice","chunkArray","row","item","FieldsEditor","fields","answerToFieldIndex","onsubmit","preventDefault","headItems","toArray","component","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","concat","ItemList","add","FieldEditTags","ontagchange","inputAttrs","input","FieldsEditorModal","masonAnswers","dirty","processing","title","answersChanged","Button","children","loading","onclick","saveAnswers","save","then","modal","close","redraw","err","Modal","extend","DiscussionControls","canUpdateMasonAnswers","show","FieldsViewer","head","fieldsItems","answer_list","showFieldsOnPost","post","number","initializers","models","Discussion","canSeeMasonAnswers","Forum","canFillMasonFields","DiscussionComposer","DiscussionHero","CommentPost","subtree","check","join","postHeaderIndex","attrs","splice","addFieldUpdateControl","override","original","model","type"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Button'];","export default function (items, attr = 'sort') {\n    return items.sort(\n        (a, b) => a[attr]() - b[attr]()\n    );\n}\n","module.exports = flarum.core.compat['utils/mixin'];","module.exports = flarum.core.compat['utils/ItemList'];","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class Answer extends mixin(Model, {\n    content: Model.attribute('content'),\n    is_suggested: Model.attribute('is_suggested'),\n    sort: Model.attribute('sort'),\n    field: Model.hasOne('field'),\n}) {\n    /**\n     * @inheritDoc\n     */\n    apiEndpoint() {\n        return '/fof/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['utils/computed'];","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\nimport computed from 'flarum/utils/computed';\n\nexport default class Field extends mixin(Model, {\n    name: Model.attribute('name'),\n    description: Model.attribute('description'),\n    min_answers_count: Model.attribute('min_answers_count'),\n    max_answers_count: Model.attribute('max_answers_count'),\n    show_when_empty: Model.attribute('show_when_empty'),\n    user_values_allowed: Model.attribute('user_values_allowed'),\n    validation: Model.attribute('validation'),\n    icon: Model.attribute('icon'),\n    sort: Model.attribute('sort'),\n    deleted_at: Model.attribute('deleted_at', Model.transformDate),\n    all_answers: Model.hasMany('all_answers'),\n    suggested_answers: Model.hasMany('suggested_answers'),\n    required: computed('min_answers_count', min_answers_count => min_answers_count > 0),\n    multiple: computed('max_answers_count', max_answers_count => max_answers_count > 1),\n}) {\n    /**\n     * @inheritDoc\n     */\n    apiEndpoint() {\n        return '/fof/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['models/Forum'];","module.exports = flarum.core.compat['tags/utils/sortTags'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['components/DiscussionHero'];","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    init() {\n        this.field = this.props.field;\n        this.answers = this.props.answers;\n        this.onchange = this.props.onchange;\n    }\n\n    view() {\n        let selectedAnswerIdsForThisField = [];\n\n        this.field.suggested_answers().forEach(answer => {\n            const answerIndex = this.answers.findIndex(a => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        return m('span.Select', [\n            m('select.Select-input.FormControl', {\n                multiple: this.field.multiple(),\n                onchange: event => {\n                    let answers = [];\n\n                    for (let option of event.target.options) {\n                        if (option.selected && option.value !== 'none') {\n                            const answerId = option.value;\n\n                            // This will only work with suggested answers for now\n                            // As they are the only ones registered in the store\n                            answers.push(app.store.getById('mason-answers', answerId));\n                        }\n                    }\n\n                    this.onchange(answers);\n                },\n            }, [\n                (this.field.multiple() ? null : m('option', {\n                    value: 'none',\n                    selected: selectedAnswerIdsForThisField.length === 0,\n                    disabled: this.field.required(),\n                    hidden: this.placeholderHidden(),\n                }, this.selectPlaceholder())),\n                sortByAttribute(this.field.suggested_answers()).map(\n                    answer => m('option', {\n                        value: answer.id(),\n                        selected: selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1,\n                    }, answer.content())\n                ),\n            ]),\n            icon('fas fa-caret-down', {className: 'Select-caret'}),\n        ]);\n    }\n\n    placeholderHidden() {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.field.required();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += this.field.name();\n\n            if (this.field.required()) {\n                text+= ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (this.field.required()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Component from 'flarum/Component';\n\nexport default class FieldEditText extends Component {\n    init() {\n        this.field = this.props.field;\n        this.answers = this.props.answers;\n        this.onchange = this.props.onchange;\n\n        this.content = '';\n\n        const answersForThisField = this.answers.filter(answer => {\n            // Temporary store entries seem to turn into undefined after saving\n            if (typeof answer === 'undefined') {\n                return false;\n            }\n\n            return answer.field().id() === this.field.id();\n        });\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return m('input.FormControl', {\n            required: this.field.required(),\n            value: this.content,\n            oninput: m.withAttr('value', value => {\n                this.content = value;\n\n                if (this.content === '') {\n                    this.onchange([]);\n                } else {\n                    const answer = app.store.createRecord('mason-answers', {\n                        attributes: {\n                            content: this.content,\n                        },\n                        relationships: {\n                            field: {\n                                data: Model.getIdentifier(this.field),\n                            },\n                        },\n                    });\n\n                    this.onchange([answer]);\n                }\n            }),\n            placeholder: this.fieldPlaceholder(),\n        });\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\n\nexport default class DiscussionFields extends Component {\n    init() {\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.props.discussion) {\n            this.tags = this.tags.filter(tag => tag.canAddToDiscussion() || this.props.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.props.discussion.tags();\n        } else {\n            this.tags = this.tags.filter(tag => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter(tag => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter(tag => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return m('.Alert', app.translator.trans('fof-mason.forum.tags.inadequate-settings'));\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort(tag => tag.parent() ? -1 : 1)[0].id() : null;\n\n        const required = this.fieldRequired();\n\n        return m('.Mason-Field.Form-group', {\n            className: app.forum.attribute('fof-mason.labels-as-placeholders') ? 'Mason-Field--label-as-placeholder' : '',\n        }, [\n            m('label', this.fieldLabel()),\n            m('span.Select', [\n                m('select.Select-input.FormControl', {\n                    onchange: m.withAttr('value', id => {\n                        this.selectedTags = [];\n\n                        if (id !== 'none') {\n                            this.selectedTags.push(this.tags.find(tag => tag.id() === id));\n\n                            const parent = this.selectedTags[0].parent();\n                            if (parent) {\n                                this.selectedTags.push(parent);\n                            }\n                        }\n\n                        this.props.onchange(this.selectedTags);\n                    }),\n                }, [\n                    m('option', {\n                        value: 'none',\n                        selected: this.selectedTags.length === 0,\n                        disabled: required,\n                        hidden: this.placeholderHidden(),\n                    }, this.selectPlaceholder()),\n                    this.tags.map(\n                        tag => {\n                            const parent = tag.parent();\n\n                            return m('option', {\n                                value: tag.id(),\n                                selected: tag.id() === currentSelectedChild,\n                            }, (parent ? parent.name() + ' | ' : '') + tag.name());\n                        }\n                    ),\n                ]),\n                icon('fas fa-caret-down', {className: 'Select-caret'}),\n            ]),\n        ]);\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('fof-mason.tags-field-name') || app.translator.trans('fof-mason.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport chunkArray from './../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return m('.Mason-Grid-Wrapper', m('.Mason-Grid', chunkArray(this.props.items, app.forum.attribute('fof-mason.column-count')).map(\n            row => m('.Mason-Row', row.map(\n                item => m('.Mason-Column', item)\n            ))\n        )));\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size\n * Useful for grid layouts\n * @see https://stackoverflow.com/a/10456644/3133038\n * @param {Array} items\n * @param {number} itemsPerChunk\n * @returns {Array}\n */\nexport default function (items, itemsPerChunk) {\n    let R = [];\n    for (let i = 0; i < items.length; i += itemsPerChunk) {\n        R.push(items.slice(i, i + itemsPerChunk));\n    }\n    return R;\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport ItemList from 'flarum/utils/ItemList';\nimport Component from 'flarum/Component';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditor extends Component {\n    init() {\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach(\n            field => {\n                field.suggested_answers().forEach(\n                    answer => {\n                        this.answerToFieldIndex[answer.id()] = field.id();\n                    }\n                );\n            }\n        );\n    }\n\n    view() {\n        return m('form.Mason-Fields.Mason-Fields--editor', {\n            onsubmit(event) {\n                event.preventDefault();\n            },\n        }, [\n            this.headItems().toArray(),\n            FieldGrid.component({\n                items: this.fieldItems().toArray(),\n            }),\n        ]);\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.props.answers.filter(\n            answer => {\n                const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n                // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n                // In that case the field should be linked in the relationship\n                if (typeof reverseFieldLookup === 'undefined') {\n                    return answer.field().id() !== field.id();\n                }\n\n                return reverseFieldLookup !== field.id();\n            }\n        );\n\n        answers = answers.concat(fieldAnswers);\n\n        this.props.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', m('h5.Mason-Field--title', app.forum.attribute('fof-mason.fields-section-title')));\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.tags-as-fields')) {\n            items.add('tags', FieldEditTags.component({\n                discussion: this.props.discussion,\n                onchange: tags => {\n                    if (this.props.ontagchange) {\n                        this.props.ontagchange(tags);\n                    }\n                },\n            }));\n        }\n\n        this.fields.forEach(field => {\n            const inputAttrs = {\n                field,\n                answers: this.props.answers,\n                onchange: fieldAnswers => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = FieldEditText.component(inputAttrs);\n            } else {\n                input = FieldEditDropdown.component(inputAttrs);\n            }\n\n            items.add('field-' + field.id(), m('.Mason-Field.Form-group', {\n                className: app.forum.attribute('fof-mason.labels-as-placeholders') ? 'Mason-Field--label-as-placeholder' : '',\n            }, [\n                m('label', [\n                    (field.icon() ? [icon(field.icon()), ' '] : null),\n                    field.name(),\n                    (field.required() ? ' *' : null),\n                ]),\n                input,\n                (field.description() ? m('.helpText', field.description()) : null),\n            ]));\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport Button from 'flarum/components/Button';\nimport FieldsEditor from './FieldsEditor';\n\nexport default class FieldsEditorModal extends Modal {\n    init() {\n        super.init();\n\n        this.answers = this.props.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n\n        // Stays null if the feature is not used\n        this.tags = null;\n    }\n\n    title() {\n        return app.translator.trans('fof-mason.forum.answers-modal.edit-title', {\n            title: m('em', this.props.discussion.title()),\n        });\n    }\n\n    content() {\n        return [\n            m('.Modal-body', FieldsEditor.component({\n                discussion: this.props.discussion, // Only for the tags feature\n                answers: this.answers,\n                onchange: this.answersChanged.bind(this),\n                ontagchange: tags => {\n                    this.tags = tags;\n                    this.dirty = true;\n                },\n            })),\n            m('.Modal-footer', [\n                Button.component({\n                    className: 'Button Button--primary',\n                    children: app.translator.trans('fof-mason.forum.answers-modal.save'),\n                    loading: this.processing,\n                    disabled: !this.dirty,\n                    onclick: this.saveAnswers.bind(this),\n                }),\n            ]),\n        ];\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let relationships = {\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        if (this.tags !== null) {\n            relationships.tags = this.tags;\n        }\n\n        this.props.discussion.save({\n            relationships,\n        }).then(() => {\n            this.processing = false;\n            app.modal.close();\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n            throw err;\n        });\n    }\n}\n","import {extend} from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add('mason-update-answers', Button.component({\n                children: app.translator.trans('fof-mason.forum.discussion-controls.edit-answers'),\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new FieldsEditorModal({discussion})),\n            }));\n        }\n    });\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport ItemList from 'flarum/utils/ItemList';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    init() {\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.props.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('fof-mason.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return m('div');\n        }\n\n        return m('.Mason-Fields.Mason-Fields--viewer', [\n            head,\n            FieldGrid.component({\n                items: fields,\n            }),\n        ]);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add('edit', Button.component({\n                className: 'Button Mason-Fields--edit',\n                children: app.translator.trans('fof-mason.forum.discussion-controls.edit-answers'),\n                icon: 'fas fa-pen',\n                onclick: () => app.modal.show(new FieldsEditorModal({\n                    discussion: this.discussion,\n                })),\n            }));\n        }\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', m('h5.Mason-Field--title', app.forum.attribute('fof-mason.fields-section-title')));\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach(field => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(this.discussion.masonAnswers().filter(answer => {\n                // It's necessary to compare the field() relationship\n                // Because field.suggested_answers() won't contain new and user answers\n                return answer.field().id() === field.id();\n            }));\n\n            let answer_list = answers.map(answer => m('span.Mason-Inline-Answer', answer.content()));\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(m('em.Mason-Inline-Answer', app.translator.trans('fof-mason.forum.post-answers.no-answer')));\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add('field-' + field.id(), m('.Mason-Field.Form-group', [\n                m('label', [\n                    (field.icon() ? [icon(field.icon()), ' '] : null),\n                    field.name(),\n                ]),\n                m('.FormControl.Mason-Inline-Answers', answer_list),\n            ]));\n        });\n\n        return items;\n    }\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport CommentPost from 'flarum/components/CommentPost';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('fof-mason.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'init', function () {\n        if (!this.props.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.props.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return this.props.post.discussion().masonAnswers().map(answer => answer.id()).join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.props.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.props.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex(item => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, FieldsViewer.component({\n            discussion: this.props.post.discussion(),\n        }));\n    });\n}\n","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Discussion from 'flarum/models/Discussion';\nimport Forum from 'flarum/models/Forum';\nimport Answer from './../lib/models/Answer';\nimport Field from './../lib/models/Field';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from \"./patchModelIdentifier\";\n\napp.initializers.add('fof-mason', app => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport FieldsEditor from './components/FieldsEditor';\n\nexport default function () {\n    DiscussionComposer.prototype.masonAnswers = [];\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        items.add('mason-fields', FieldsEditor.component({\n            answers: this.masonAnswers,\n            onchange: answers => {\n                this.masonAnswers = answers;\n            },\n            ontagchange: tags => {\n                this.tags = tags;\n            },\n        }));\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.masonAnswers;\n    });\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionHero from 'flarum/components/DiscussionHero';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.props.discussion.canSeeMasonAnswers() || !app.forum.attribute('fof-mason.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', FieldsViewer.component({\n            discussion: this.props.discussion,\n        }));\n    });\n}\n","import {override} from 'flarum/extend';\nimport Model from 'flarum/Model';\nimport Answer from './../lib/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    })\n}\n"],"sourceRoot":""}