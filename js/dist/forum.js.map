{"version":3,"sources":["webpack://@flagrow/mason/webpack/bootstrap","webpack://@flagrow/mason/external \"flarum.core.compat['app']\"","webpack://@flagrow/mason/external \"flarum.core.compat['Model']\"","webpack://@flagrow/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flagrow/mason/external \"flarum.core.compat['Component']\"","webpack://@flagrow/mason/external \"flarum.core.compat['extend']\"","webpack://@flagrow/mason/external \"flarum.core.compat['helpers/icon']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/Button']\"","webpack://@flagrow/mason/./src/lib/helpers/sortByAttribute.js","webpack://@flagrow/mason/external \"flarum.core.compat['utils/mixin']\"","webpack://@flagrow/mason/external \"flarum.core.compat['utils/ItemList']\"","webpack://@flagrow/mason/./src/lib/models/Answer.js","webpack://@flagrow/mason/external \"flarum.core.compat['utils/computed']\"","webpack://@flagrow/mason/./src/lib/models/Field.js","webpack://@flagrow/mason/external \"flarum.core.compat['models/Discussion']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/CommentPost']\"","webpack://@flagrow/mason/external \"flarum.core.compat['models/Forum']\"","webpack://@flagrow/mason/external \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@flagrow/mason/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/Modal']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@flagrow/mason/./src/forum/components/FieldEditDropdown.js","webpack://@flagrow/mason/./src/forum/components/FieldEditText.js","webpack://@flagrow/mason/./src/forum/components/FieldEditTags.js","webpack://@flagrow/mason/./src/forum/components/FieldGrid.js","webpack://@flagrow/mason/./src/forum/helpers/chunkArray.js","webpack://@flagrow/mason/./src/forum/components/FieldsEditor.js","webpack://@flagrow/mason/./src/forum/components/FieldsEditorModal.js","webpack://@flagrow/mason/./src/forum/addFieldUpdateControl.js","webpack://@flagrow/mason/./src/forum/components/FieldsViewer.js","webpack://@flagrow/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@flagrow/mason/./src/forum/index.js","webpack://@flagrow/mason/./src/forum/addComposerFields.js","webpack://@flagrow/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@flagrow/mason/./src/forum/patchModelIdentifier.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","__webpack_exports__","items","attr","sort","a","b","Answer","apiEndpoint","this","exists","data","id","mixin","Model","content","attribute","is_suggested","field","hasOne","Field","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","transformDate","all_answers","hasMany","suggested_answers","required","computed","multiple","FieldEditDropdown","init","props","answers","onchange","view","_this","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","event","_iterator","target","options","_isArray","Array","isArray","_i","iterator","_ref","length","next","done","option","selected","answerId","app","store","getById","disabled","hidden","placeholderHidden","selectPlaceholder","sortByAttribute","map","indexOf","className","forum","text","translator","trans","Component","FieldEditText","answersForThisField","filter","_this2","oninput","withAttr","createRecord","attributes","relationships","getIdentifier","placeholder","fieldPlaceholder","DiscussionFields","tags","all","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","currentSelectedChild","parent","fieldRequired","fieldLabel","find","FieldGrid","itemsPerChunk","R","slice","chunkArray","row","item","FieldsEditor","fields","answerToFieldIndex","onsubmit","preventDefault","headItems","toArray","component","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","concat","ItemList","add","_this3","FieldEditTags","ontagchange","inputAttrs","input","FieldsEditorModal","_Modal","flagrowMasonAnswers","dirty","processing","title","answersChanged","Button","children","loading","onclick","saveAnswers","save","then","modal","close","redraw","err","Modal","addFieldUpdateControl","extend","DiscussionControls","canUpdateFlagrowMasonAnswers","show","FieldsViewer","head","fieldsItems","answer_list","showFieldsOnPost","post","number","initializers","models","Discussion","canSeeFlagrowMasonAnswers","Forum","canFillFlagrowMasonFields","DiscussionComposer","DiscussionHero","CommentPost","subtree","check","join","postHeaderIndex","attrs","splice","override","original","model","type"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Button'];","export default function (items, attr = 'sort') {\n    return items.sort(\n        (a, b) => a[attr]() - b[attr]()\n    );\n}\n","module.exports = flarum.core.compat['utils/mixin'];","module.exports = flarum.core.compat['utils/ItemList'];","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class Answer extends mixin(Model, {\n    content: Model.attribute('content'),\n    is_suggested: Model.attribute('is_suggested'),\n    sort: Model.attribute('sort'),\n    field: Model.hasOne('field'),\n}) {\n    /**\n     * @inheritDoc\n     */\n    apiEndpoint() {\n        return '/flagrow/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['utils/computed'];","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\nimport computed from 'flarum/utils/computed';\n\nexport default class Field extends mixin(Model, {\n    name: Model.attribute('name'),\n    description: Model.attribute('description'),\n    min_answers_count: Model.attribute('min_answers_count'),\n    max_answers_count: Model.attribute('max_answers_count'),\n    show_when_empty: Model.attribute('show_when_empty'),\n    user_values_allowed: Model.attribute('user_values_allowed'),\n    validation: Model.attribute('validation'),\n    icon: Model.attribute('icon'),\n    sort: Model.attribute('sort'),\n    deleted_at: Model.attribute('deleted_at', Model.transformDate),\n    all_answers: Model.hasMany('all_answers'),\n    suggested_answers: Model.hasMany('suggested_answers'),\n    required: computed('min_answers_count', min_answers_count => min_answers_count > 0),\n    multiple: computed('max_answers_count', max_answers_count => max_answers_count > 1),\n}) {\n    /**\n     * @inheritDoc\n     */\n    apiEndpoint() {\n        return '/flagrow/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['models/Forum'];","module.exports = flarum.core.compat['tags/utils/sortTags'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['components/DiscussionHero'];","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    init() {\n        this.field = this.props.field;\n        this.answers = this.props.answers;\n        this.onchange = this.props.onchange;\n    }\n\n    view() {\n        let selectedAnswerIdsForThisField = [];\n\n        this.field.suggested_answers().forEach(answer => {\n            const answerIndex = this.answers.findIndex(a => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        return m('span.Select', [\n            m('select.Select-input.FormControl', {\n                multiple: this.field.multiple(),\n                onchange: event => {\n                    let answers = [];\n\n                    for (let option of event.target.options) {\n                        if (option.selected && option.value !== 'none') {\n                            const answerId = option.value;\n\n                            // This will only work with suggested answers for now\n                            // As they are the only ones registered in the store\n                            answers.push(app.store.getById('flagrow-mason-answer', answerId));\n                        }\n                    }\n\n                    this.onchange(answers);\n                },\n            }, [\n                (this.field.multiple() ? null : m('option', {\n                    value: 'none',\n                    selected: selectedAnswerIdsForThisField.length === 0,\n                    disabled: this.field.required(),\n                    hidden: this.placeholderHidden(),\n                }, this.selectPlaceholder())),\n                sortByAttribute(this.field.suggested_answers()).map(\n                    answer => m('option', {\n                        value: answer.id(),\n                        selected: selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1,\n                    }, answer.content())\n                ),\n            ]),\n            icon('fas fa-caret-down', {className: 'Select-caret'}),\n        ]);\n    }\n\n    placeholderHidden() {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('flagrow.mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.field.required();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('flagrow.mason.labels-as-placeholders')) {\n            text += this.field.name();\n\n            if (this.field.required()) {\n                text+= ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (this.field.required()) {\n            text += app.translator.trans('flagrow-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('flagrow-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Component from 'flarum/Component';\n\nexport default class FieldEditText extends Component {\n    init() {\n        this.field = this.props.field;\n        this.answers = this.props.answers;\n        this.onchange = this.props.onchange;\n\n        this.content = '';\n\n        const answersForThisField = this.answers.filter(answer => {\n            // Temporary store entries seem to turn into undefined after saving\n            if (typeof answer === 'undefined') {\n                return false;\n            }\n\n            return answer.field().id() === this.field.id();\n        });\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return m('input.FormControl', {\n            required: this.field.required(),\n            value: this.content,\n            oninput: m.withAttr('value', value => {\n                this.content = value;\n\n                if (this.content === '') {\n                    this.onchange([]);\n                } else {\n                    const answer = app.store.createRecord('flagrow-mason-answer', {\n                        attributes: {\n                            content: this.content,\n                        },\n                        relationships: {\n                            field: {\n                                data: Model.getIdentifier(this.field),\n                            },\n                        },\n                    });\n\n                    this.onchange([answer]);\n                }\n            }),\n            placeholder: this.fieldPlaceholder(),\n        });\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('flagrow.mason.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\n\nexport default class DiscussionFields extends Component {\n    init() {\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.props.discussion) {\n            this.tags = this.tags.filter(tag => tag.canAddToDiscussion() || this.props.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.props.discussion.tags();\n        } else {\n            this.tags = this.tags.filter(tag => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter(tag => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter(tag => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return m('.Alert', app.translator.trans('flagrow-mason.forum.tags.inadequate-settings'));\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort(tag => tag.parent() ? -1 : 1)[0].id() : null;\n\n        const required = this.fieldRequired();\n\n        return m('.Mason-Field.Form-group', {\n            className: app.forum.attribute('flagrow.mason.labels-as-placeholders') ? 'Mason-Field--label-as-placeholder' : '',\n        }, [\n            m('label', this.fieldLabel()),\n            m('span.Select', [\n                m('select.Select-input.FormControl', {\n                    onchange: m.withAttr('value', id => {\n                        this.selectedTags = [];\n\n                        if (id !== 'none') {\n                            this.selectedTags.push(this.tags.find(tag => tag.id() === id));\n\n                            const parent = this.selectedTags[0].parent();\n                            if (parent) {\n                                this.selectedTags.push(parent);\n                            }\n                        }\n\n                        this.props.onchange(this.selectedTags);\n                    }),\n                }, [\n                    m('option', {\n                        value: 'none',\n                        selected: this.selectedTags.length === 0,\n                        disabled: required,\n                        hidden: this.placeholderHidden(),\n                    }, this.selectPlaceholder()),\n                    this.tags.map(\n                        tag => {\n                            const parent = tag.parent();\n\n                            return m('option', {\n                                value: tag.id(),\n                                selected: tag.id() === currentSelectedChild,\n                            }, (parent ? parent.name() + ' | ' : '') + tag.name());\n                        }\n                    ),\n                ]),\n                icon('fas fa-caret-down', {className: 'Select-caret'}),\n            ]),\n        ]);\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('flagrow.mason.tags-field-name') || app.translator.trans('flagrow-mason.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('flagrow.mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('flagrow.mason.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('flagrow-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('flagrow-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport chunkArray from './../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return m('.Mason-Grid-Wrapper', m('.Mason-Grid', chunkArray(this.props.items, app.forum.attribute('flagrow.mason.column-count')).map(\n            row => m('.Mason-Row', row.map(\n                item => m('.Mason-Column', item)\n            ))\n        )));\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size\n * Useful for grid layouts\n * @see https://stackoverflow.com/a/10456644/3133038\n * @param {Array} items\n * @param {number} itemsPerChunk\n * @returns {Array}\n */\nexport default function (items, itemsPerChunk) {\n    let R = [];\n    for (let i = 0; i < items.length; i += itemsPerChunk) {\n        R.push(items.slice(i, i + itemsPerChunk));\n    }\n    return R;\n}\n","import app from 'flarum/app';\r\nimport icon from 'flarum/helpers/icon';\r\nimport ItemList from 'flarum/utils/ItemList';\r\nimport Component from 'flarum/Component';\r\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\r\nimport FieldEditDropdown from './FieldEditDropdown';\r\nimport FieldEditText from './FieldEditText';\r\nimport FieldEditTags from './FieldEditTags';\r\nimport FieldGrid from './FieldGrid';\r\n\r\nexport default class FieldsEditor extends Component {\r\n    init() {\r\n        this.fields = sortByAttribute(app.store.all('flagrow-mason-field'));\r\n\r\n        // Index to quickly do a reverse lookup from answer to field\r\n        this.answerToFieldIndex = [];\r\n        this.fields.forEach(\r\n            field => {\r\n                field.suggested_answers().forEach(\r\n                    answer => {\r\n                        this.answerToFieldIndex[answer.id()] = field.id();\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    view() {\r\n        return m('form.Mason-Fields.Mason-Fields--editor', {\r\n            onsubmit(event) {\r\n                event.preventDefault();\r\n            },\r\n        }, [\r\n            this.headItems().toArray(),\r\n            FieldGrid.component({\r\n                items: this.fieldItems().toArray(),\r\n            }),\r\n        ]);\r\n    }\r\n\r\n    updateSelection(field, fieldAnswers) {\r\n        // Keep only answers to other fields\r\n        let answers = this.props.answers.filter(\r\n            answer => {\r\n                const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\r\n\r\n                // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\r\n                // In that case the field should be linked in the relationship\r\n                if (typeof reverseFieldLookup === 'undefined') {\r\n                    return answer.field().id() !== field.id();\r\n                }\r\n\r\n                return reverseFieldLookup !== field.id();\r\n            }\r\n        );\r\n\r\n        answers = answers.concat(fieldAnswers);\r\n\r\n        this.props.onchange(answers);\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('flagrow.mason.fields-section-title')) {\r\n            items.add('title', m('h5.Mason-Field--title', app.forum.attribute('flagrow.mason.fields-section-title')));\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    fieldItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('flagrow.mason.tags-as-fields')) {\r\n            items.add('tags', FieldEditTags.component({\r\n                discussion: this.props.discussion,\r\n                onchange: tags => {\r\n                    if (this.props.ontagchange) {\r\n                        this.props.ontagchange(tags);\r\n                    }\r\n                },\r\n            }));\r\n        }\r\n\r\n        this.fields.forEach(field => {\r\n            const inputAttrs = {\r\n                field,\r\n                answers: this.props.answers,\r\n                onchange: fieldAnswers => {\r\n                    // Every input component calls \"onchange\" with a list of answers from the store\r\n                    this.updateSelection(field, fieldAnswers);\r\n                },\r\n            };\r\n            let input = null;\r\n\r\n            if (field.user_values_allowed()) {\r\n                input = FieldEditText.component(inputAttrs);\r\n            } else {\r\n                input = FieldEditDropdown.component(inputAttrs);\r\n            }\r\n\r\n            items.add('field-' + field.id(), m('.Mason-Field.Form-group', {\r\n                className: app.forum.attribute('flagrow.mason.labels-as-placeholders') ? 'Mason-Field--label-as-placeholder' : '',\r\n            }, [\r\n                m('label', [\r\n                    (field.icon() ? [icon(field.icon()), ' '] : null),\r\n                    field.name(),\r\n                    (field.required() ? ' *' : null),\r\n                ]),\r\n                input,\r\n                (field.description() ? m('.helpText', field.description()) : null),\r\n            ]));\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport Button from 'flarum/components/Button';\nimport FieldsEditor from './FieldsEditor';\n\nexport default class FieldsEditorModal extends Modal {\n    init() {\n        super.init();\n\n        this.answers = this.props.discussion.flagrowMasonAnswers();\n        this.dirty = false;\n        this.processing = false;\n\n        // Stays null if the feature is not used\n        this.tags = null;\n    }\n\n    title() {\n        return app.translator.trans('flagrow-mason.forum.answers-modal.edit-title', {\n            title: m('em', this.props.discussion.title()),\n        });\n    }\n\n    content() {\n        return [\n            m('.Modal-body', FieldsEditor.component({\n                discussion: this.props.discussion, // Only for the tags feature\n                answers: this.answers,\n                onchange: this.answersChanged.bind(this),\n                ontagchange: tags => {\n                    this.tags = tags;\n                    this.dirty = true;\n                },\n            })),\n            m('.Modal-footer', [\n                Button.component({\n                    className: 'Button Button--primary',\n                    children: app.translator.trans('flagrow-mason.forum.answers-modal.save'),\n                    loading: this.processing,\n                    disabled: !this.dirty,\n                    onclick: this.saveAnswers.bind(this),\n                }),\n            ]),\n        ];\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let relationships = {\n            flagrowMasonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        if (this.tags !== null) {\n            relationships.tags = this.tags;\n        }\n\n        this.props.discussion.save({\n            relationships,\n        }).then(() => {\n            this.processing = false;\n            app.modal.close();\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n            throw err;\n        });\n    }\n}\n","import {extend} from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateFlagrowMasonAnswers()) {\n            items.add('flagrow-mason-update-answers', Button.component({\n                children: app.translator.trans('flagrow-mason.forum.discussion-controls.edit-answers'),\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new FieldsEditorModal({discussion})),\n            }));\n        }\n    });\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport ItemList from 'flarum/utils/ItemList';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    init() {\n        this.fields = sortByAttribute(app.store.all('flagrow-mason-field'));\n        this.discussion = this.props.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('flagrow.mason.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return m('div');\n        }\n\n        return m('.Mason-Fields.Mason-Fields--viewer', [\n            head,\n            FieldGrid.component({\n                items: fields,\n            }),\n        ]);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateFlagrowMasonAnswers()) {\n            items.add('edit', Button.component({\n                className: 'Button Mason-Fields--edit',\n                children: app.translator.trans('flagrow-mason.forum.discussion-controls.edit-answers'),\n                icon: 'fas fa-pen',\n                onclick: () => app.modal.show(new FieldsEditorModal({\n                    discussion: this.discussion,\n                })),\n            }));\n        }\n\n        if (app.forum.attribute('flagrow.mason.fields-section-title')) {\n            items.add('title', m('h5.Mason-Field--title', app.forum.attribute('flagrow.mason.fields-section-title')));\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach(field => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(this.discussion.flagrowMasonAnswers().filter(answer => {\n                // It's necessary to compare the field() relationship\n                // Because field.suggested_answers() won't contain new and user answers\n                return answer.field().id() === field.id();\n            }));\n\n            let answer_list = answers.map(answer => m('span.Mason-Inline-Answer', answer.content()));\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(m('em.Mason-Inline-Answer', app.translator.trans('flagrow-mason.forum.post-answers.no-answer')));\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add('field-' + field.id(), m('.Mason-Field.Form-group', [\n                m('label', [\n                    (field.icon() ? [icon(field.icon()), ' '] : null),\n                    field.name(),\n                ]),\n                m('.FormControl.Mason-Inline-Answers', answer_list),\n            ]));\n        });\n\n        return items;\n    }\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport CommentPost from 'flarum/components/CommentPost';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('flagrow.mason.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'init', function () {\n        if (!this.props.post.discussion().canSeeFlagrowMasonAnswers() || !showFieldsOnPost(this.props.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return this.props.post.discussion().flagrowMasonAnswers().map(answer => answer.id()).join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.props.post.discussion().canSeeFlagrowMasonAnswers() || !showFieldsOnPost(this.props.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex(item => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, FieldsViewer.component({\n            discussion: this.props.post.discussion(),\n        }));\n    });\n}\n","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Discussion from 'flarum/models/Discussion';\nimport Forum from 'flarum/models/Forum';\nimport Answer from './../lib/models/Answer';\nimport Field from './../lib/models/Field';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from \"./patchModelIdentifier\";\n\napp.initializers.add('flagrow-mason', app => {\n    app.store.models['flagrow-mason-field'] = Field;\n    app.store.models['flagrow-mason-answer'] = Answer;\n\n    Discussion.prototype.flagrowMasonAnswers = Model.hasMany('flagrowMasonAnswers');\n    Discussion.prototype.canSeeFlagrowMasonAnswers = Model.attribute('canSeeFlagrowMasonAnswers');\n    Discussion.prototype.canUpdateFlagrowMasonAnswers = Model.attribute('canUpdateFlagrowMasonAnswers');\n    Forum.prototype.canFillFlagrowMasonFields = Model.attribute('canFillFlagrowMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport FieldsEditor from './components/FieldsEditor';\n\nexport default function () {\n    DiscussionComposer.prototype.flagrowMasonAnswers = [];\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillFlagrowMasonFields()) {\n            return;\n        }\n\n        items.add('flagrow-mason-fields', FieldsEditor.component({\n            answers: this.flagrowMasonAnswers,\n            onchange: answers => {\n                this.flagrowMasonAnswers = answers;\n            },\n            ontagchange: tags => {\n                this.tags = tags;\n            },\n        }));\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillFlagrowMasonFields()) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.flagrowMasonAnswers = this.flagrowMasonAnswers;\n    });\n}\n","import {extend} from 'flarum/extend';\r\nimport app from 'flarum/app';\r\nimport DiscussionHero from 'flarum/components/DiscussionHero';\r\nimport FieldsViewer from './components/FieldsViewer';\r\n\r\nexport default function () {\r\n    extend(DiscussionHero.prototype, 'items', function (items) {\r\n        if (!this.props.discussion.canSeeFlagrowMasonAnswers() || !app.forum.attribute('flagrow.mason.fields-in-hero')) {\r\n            return;\r\n        }\r\n\r\n        items.add('flagrow-mason-fields', FieldsViewer.component({\r\n            discussion: this.props.discussion,\r\n        }));\r\n    });\r\n}\r\n","import {override} from 'flarum/extend';\nimport Model from 'flarum/Model';\nimport Answer from './../lib/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    })\n}\n"],"sourceRoot":""}