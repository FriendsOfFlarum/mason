{"version":3,"sources":["webpack://@fof/mason/webpack/bootstrap","webpack://@fof/mason/external \"flarum.core.compat['forum/app']\"","webpack://@fof/mason/external \"flarum.core.compat['common/Model']\"","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/mason/external \"flarum.core.compat['common/Component']\"","webpack://@fof/mason/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/mason/external \"flarum.core.compat['common/components/Button']\"","webpack://@fof/mason/./src/common/helpers/sortByAttribute.ts","webpack://@fof/mason/external \"flarum.core.compat['common/extend']\"","webpack://@fof/mason/./src/common/models/Answer.js","webpack://@fof/mason/external \"flarum.core.compat['common/utils/computed']\"","webpack://@fof/mason/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/mason/./src/common/models/Field.js","webpack://@fof/mason/external \"flarum.core.compat['common/utils/classList']\"","webpack://@fof/mason/external \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/mason/external \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@fof/mason/external \"flarum.core.compat['common/components/CommentPost']\"","webpack://@fof/mason/external \"flarum.core.compat['common/models/Forum']\"","webpack://@fof/mason/external \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@fof/mason/external \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@fof/mason/external \"flarum.core.compat['common/components/Modal']\"","webpack://@fof/mason/external \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@fof/mason/external \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@fof/mason/./src/forum/components/FieldEditDropdown.js","webpack://@fof/mason/./src/forum/components/FieldEditText.js","webpack://@fof/mason/./src/forum/components/FieldEditTags.js","webpack://@fof/mason/./src/forum/components/FieldGrid.js","webpack://@fof/mason/./src/forum/helpers/chunkArray.ts","webpack://@fof/mason/./src/forum/components/FieldsEditor.js","webpack://@fof/mason/./src/forum/components/FieldsEditorModal.js","webpack://@fof/mason/./src/forum/components/FieldsViewer.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@fof/mason/./src/forum/index.js","webpack://@fof/mason/./src/forum/addComposerFields.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@fof/mason/./src/forum/addFieldUpdateControl.js","webpack://@fof/mason/./src/forum/patchModelIdentifier.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","sortByAttribute","items","attr","sort","a","b","Answer","content","Model","attribute","is_suggested","field","hasOne","apiEndpoint","this","exists","data","id","Field","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","transformDate","all_answers","hasMany","suggested_answers","required","computed","multiple","FieldEditDropdown","view","vnode","attrs","answers","onchange","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","className","event","target","options","option","selected","answerId","app","store","getById","length","disabled","hidden","placeholderHidden","selectPlaceholder","map","indexOf","forum","text","translator","trans","Component","FieldEditText","oninit","answersForThisField","filter","oninput","e","createRecord","attributes","relationships","getIdentifier","placeholder","fieldPlaceholder","DiscussionFields","inputUuid","tags","all","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","Math","random","toString","substring","currentSelectedChild","parent","fieldRequired","classList","for","fieldLabel","find","FieldGrid","arr","size","Array","ceil","fill","undefined","_","slice","row","item","FieldsEditor","fields","answerToFieldIndex","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","concat","ItemList","add","ontagchange","inputAttrs","input","class","FieldsEditorModal","masonAnswers","dirty","processing","title","answersChanged","loading","onclick","saveAnswers","save","then","modal","close","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","show","answer_list","showFieldsOnPost","post","current","matches","DiscussionPage","number","initializers","models","Discussion","canSeeMasonAnswers","Forum","canFillMasonFields","DiscussionComposer","extend","composer","DiscussionHero","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","override","original","model","type"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = flarum.core.compat['forum/app'];","module.exports = flarum.core.compat['common/Model'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","module.exports = flarum.core.compat['common/Component'];","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/components/Button'];","export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\n    if (!attr) attr = 'sort';\n    return items.sort((a, b) => a[attr]() - b[attr]());\n}\n","module.exports = flarum.core.compat['common/extend'];","import Model from 'flarum/common/Model';\n\nexport default class Answer extends Model {\n    content = Model.attribute('content');\n    is_suggested = Model.attribute('is_suggested');\n    sort = Model.attribute('sort');\n    field = Model.hasOne('field');\n\n    apiEndpoint() {\n        return '/fof/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['common/utils/computed'];","module.exports = flarum.core.compat['common/utils/ItemList'];","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\n\nexport default class Field extends Model {\n    name = Model.attribute('name');\n    description = Model.attribute('description');\n    min_answers_count = Model.attribute('min_answers_count');\n    max_answers_count = Model.attribute('max_answers_count');\n    show_when_empty = Model.attribute('show_when_empty');\n    user_values_allowed = Model.attribute('user_values_allowed');\n    validation = Model.attribute('validation');\n    icon = Model.attribute('icon');\n    sort = Model.attribute('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    all_answers = Model.hasMany('all_answers');\n    suggested_answers = Model.hasMany('suggested_answers');\n    required = computed('min_answers_count', (min_answers_count) => min_answers_count > 0);\n    multiple = computed('max_answers_count', (max_answers_count) => max_answers_count > 1);\n\n    apiEndpoint() {\n        return '/fof/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['common/utils/classList'];","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/components/DiscussionComposer'];","module.exports = flarum.core.compat['common/components/CommentPost'];","module.exports = flarum.core.compat['common/models/Forum'];","module.exports = flarum.core.compat['tags/utils/sortTags'];","module.exports = flarum.core.compat['forum/utils/DiscussionControls'];","module.exports = flarum.core.compat['common/components/Modal'];","module.exports = flarum.core.compat['common/components/DiscussionHero'];","module.exports = flarum.core.compat['common/components/DiscussionPage'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    view(vnode) {\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\n        const { field, answers, onchange } = vnode.attrs;\n\n        let selectedAnswerIdsForThisField = [];\n\n        field.suggested_answers().forEach((answer) => {\n            const answerIndex = answers.findIndex((a) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        return (\n            <span className=\"Select\">\n                <select\n                    className=\"Select-input FormControl\"\n                    multiple={field.multiple()}\n                    onchange={(event) => {\n                        let answers = [];\n\n                        for (let option of event.target.options) {\n                            if (option.selected && option.value !== 'none') {\n                                const answerId = option.value;\n\n                                // This will only work with suggested answers for now\n                                // As they are the only ones registered in the store\n                                answers.push(app.store.getById('mason-answers', answerId));\n                            }\n                        }\n\n                        onchange(answers);\n                    }}\n                >\n                    {!field.multiple() && (\n                        <option\n                            value=\"none\"\n                            selected={selectedAnswerIdsForThisField.length === 0}\n                            disabled={field.required()}\n                            hidden={this.placeholderHidden(field)}\n                        >\n                            {this.selectPlaceholder(field)}\n                        </option>\n                    )}\n                    {sortByAttribute(field.suggested_answers()).map((answer) => (\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\n                            {answer.content()}\n                        </option>\n                    ))}\n                </select>\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\n            </span>\n        );\n    }\n\n    placeholderHidden(field) {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return field.required();\n    }\n\n    selectPlaceholder(field) {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += field.name();\n\n            if (field.required()) {\n                text += ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (field.required()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Component from 'flarum/common/Component';\n\nexport default class FieldEditText extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.field = this.attrs.field;\n        this.answers = this.attrs.answers;\n        this.onchange = this.attrs.onchange;\n\n        this.content = '';\n\n        const answersForThisField = this.answers.filter((answer) => {\n            // Temporary store entries seem to turn into undefined after saving\n            if (typeof answer === 'undefined') {\n                return false;\n            }\n\n            return answer.field().id() === this.field.id();\n        });\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return (\n            <input\n                className=\"FormControl\"\n                required={this.field.required()}\n                value={this.content}\n                oninput={(e) => {\n                    this.content = e.target.value;\n\n                    if (this.content === '') {\n                        this.onchange([]);\n                    } else {\n                        const answer = app.store.createRecord('mason-answers', {\n                            attributes: {\n                                content: this.content,\n                            },\n                            relationships: {\n                                field: {\n                                    data: Model.getIdentifier(this.field),\n                                },\n                            },\n                        });\n\n                        this.onchange([answer]);\n                    }\n                }}\n                placeholder={this.fieldPlaceholder()}\n            />\n        );\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\nimport classList from 'flarum/common/utils/classList';\n\nexport default class DiscussionFields extends Component {\n    inputUuid;\n\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.attrs.discussion) {\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.attrs.discussion.tags();\n        } else {\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n\n        this.inputUuid = Math.random().toString(36).substring(2);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return <div className=\"Alert\">{app.translator.trans('fof-mason.forum.tags.inadequate-settings')}</div>;\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\n\n        const required = this.fieldRequired();\n\n        return (\n            <div\n                className={classList('Mason-Field Form-group', {\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('fof-mason.labels-as-placeholders'),\n                })}\n            >\n                <label for={`fofMason-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\n                <span className=\"Select\">\n                    <select\n                        className=\"Select-input FormControl\"\n                        id={`fofMason-selectInput-${inputUuid}`}\n                        onchange={(event) => {\n                            const id = event.target.value;\n\n                            this.selectedTags = [];\n\n                            if (id !== 'none') {\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\n\n                                const parent = this.selectedTags[0].parent();\n                                if (parent) {\n                                    this.selectedTags.push(parent);\n                                }\n                            }\n\n                            this.attrs.onchange(this.selectedTags);\n                        }}\n                    >\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\n                            {this.selectPlaceholder()}\n                        </option>\n                        {this.tags.map((tag) => {\n                            const parent = tag.parent();\n\n                            return (\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\n                                </option>\n                            );\n                        })}\n                        ,\n                    </select>\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\n                </span>\n            </div>\n        );\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('fof-mason.tags-field-name') || app.translator.trans('fof-mason.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport chunkArray from '../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return (\n            <div className=\"Mason-Grid-Wrapper\">\n                <div className=\"Mason-Grid\">\n                    {chunkArray(this.attrs.items, app.forum.attribute('fof-mason.column-count')).map((row) => (\n                        <div className=\"Mason-Row\">\n                            {row.map((item) => (\n                                <div className=\"Mason-Column\" {...item} />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size.\n *\n * Useful for grid layouts.\n *\n * @see https://stackoverflow.com/a/64777515/11091039\n * @param arr Array of items\n * @param size Number of items per array\n */\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\n    return Array(Math.ceil(arr.length / size))\n        .fill(undefined)\n        .map((_, i) => arr.slice(size * i, size + size * i));\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditor extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            field.suggested_answers().forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('fof-mason.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.tags-as-fields')) {\n            items.add(\n                'tags',\n                <FieldEditTags\n                    discussion={this.attrs.discussion}\n                    onchange={(tags) => {\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\n                    }}\n                />\n            );\n        }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div\n                    class={classList('Mason-Field Form-group', {\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('fof-mason.labels-as-placeholders'),\n                    })}\n                >\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                        {field.required() ? ' *' : null}\n                    </label>\n                    {input}\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditor from './FieldsEditor';\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n\n        // Stays null if the feature is not used\n        this.tags = null;\n    }\n\n    title() {\n        return app.translator.trans('fof-mason.forum.answers-modal.edit-title', {\n            title: <em>this.attrs.discussion.title()</em>,\n        });\n    }\n\n    content() {\n        return (\n            <>\n                <div className=\"Modal-body\">\n                    <FieldsEditor\n                        discussion={this.attrs.discussion} // Only for the tags feature\n                        answers={this.answers}\n                        onchange={this.answersChanged.bind(this)}\n                        ontagchange={(tags) => {\n                            this.tags = tags;\n                            this.dirty = true;\n                        }}\n                    />\n                </div>\n                <div className=\"Modal-footer\">\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\n                        {app.translator.trans('fof-mason.forum.answers-modal.save')}\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let relationships = {\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        if (this.tags !== null) {\n            relationships.tags = this.tags;\n        }\n\n        this.attrs.discussion\n            .save({\n                relationships,\n            })\n            .then(() => {\n                this.processing = false;\n                app.modal.close();\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n                throw err;\n            });\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.attrs.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('fof-mason.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return <div />;\n        }\n\n        return (\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\n                {head}\n                <FieldGrid items={fields} />\n            </div>\n        );\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'edit',\n                <Button\n                    className=\"Button Mason-Fields--edit\"\n                    icon=\"fas fa-pen\"\n                    onclick={() =>\n                        app.modal.show(FieldsEditorModal, {\n                            discussion: this.discussion,\n                        })\n                    }\n                >\n                    {app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('fof-mason.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach((field) => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(\n                (this.discussion.masonAnswers() || []).filter((answer) => {\n                    // It's necessary to compare the field() relationship\n                    // Because field.suggested_answers() won't contain new and user answers\n                    return answer.field() && answer.field().id() === field.id();\n                })\n            );\n\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('fof-mason.forum.post-answers.no-answer')}</em>);\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div className=\"Mason-Field Form-group\">\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                    </label>\n                    ,<div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>,\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/common/components/CommentPost';\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\n    if (!app.current.matches(DiscussionPage)) {\n        return false;\n    }\n\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('fof-mason.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'oninit', function () {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return (this.attrs.post.discussion().masonAnswers() || [])\n                .map((answer) => {\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\n                    if (!answer) {\n                        return '';\n                    }\n\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\n                    return JSON.stringify([answer.id(), !!answer.field()]);\n                })\n                .join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport Answer from '@common/models/Answer';\nimport Field from '@common/models/Field';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from './patchModelIdentifier';\n\napp.initializers.add('fof-mason', (app) => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\nimport FieldsEditor from './components/FieldsEditor';\n\nexport default function () {\n    DiscussionComposer.prototype.masonAnswers = [];\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        items.add(\n            'mason-fields',\n            <FieldsEditor\n                answers={this.masonAnswers}\n                onchange={(answers) => {\n                    this.masonAnswers = answers;\n                }}\n                ontagchange={(tags) => {\n                    this.composer.fields.tags = tags;\n                }}\n            />\n        );\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.masonAnswers;\n    });\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('fof-mason.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'mason-update-answers',\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\n                    {app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n    });\n}\n","import { override } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Answer from '@common/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    });\n}\n"],"sourceRoot":""}