{"version":3,"sources":["webpack://@fof/mason/webpack/bootstrap","webpack://@fof/mason/external \"flarum.core.compat['app']\"","webpack://@fof/mason/external \"flarum.core.compat['Model']\"","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/mason/external \"flarum.core.compat['Component']\"","webpack://@fof/mason/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/mason/external \"flarum.core.compat['components/Button']\"","webpack://@fof/mason/./src/lib/helpers/sortByAttribute.js","webpack://@fof/mason/external \"flarum.core.compat['extend']\"","webpack://@fof/mason/./src/lib/models/Answer.js","webpack://@fof/mason/external \"flarum.core.compat['utils/computed']\"","webpack://@fof/mason/external \"flarum.core.compat['utils/ItemList']\"","webpack://@fof/mason/./src/lib/models/Field.js","webpack://@fof/mason/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/mason/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@fof/mason/external \"flarum.core.compat['components/CommentPost']\"","webpack://@fof/mason/external \"flarum.core.compat['models/Forum']\"","webpack://@fof/mason/external \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@fof/mason/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@fof/mason/external \"flarum.core.compat['components/Modal']\"","webpack://@fof/mason/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@fof/mason/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/mason/./src/forum/components/FieldEditDropdown.js","webpack://@fof/mason/./src/forum/components/FieldEditText.js","webpack://@fof/mason/./src/forum/components/FieldEditTags.js","webpack://@fof/mason/./src/forum/components/FieldGrid.js","webpack://@fof/mason/./src/forum/helpers/chunkArray.js","webpack://@fof/mason/./src/forum/components/FieldsEditor.js","webpack://@fof/mason/./src/forum/components/FieldsEditorModal.js","webpack://@fof/mason/./src/forum/components/FieldsViewer.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@fof/mason/./src/forum/index.js","webpack://@fof/mason/./src/forum/addComposerFields.js","webpack://@fof/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@fof/mason/./src/forum/addFieldUpdateControl.js","webpack://@fof/mason/./src/forum/patchModelIdentifier.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","configurable","writable","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","items","attr","sort","a","b","Answer","Model","attribute","hasOne","apiEndpoint","this","exists","data","id","Field","transformDate","hasMany","computed","min_answers_count","max_answers_count","FieldEditDropdown","view","vnode","attrs","field","answers","onchange","selectedAnswerIdsForThisField","suggested_answers","forEach","answer","findIndex","push","multiple","event","target","options","option","selected","answerId","app","store","getById","length","disabled","required","hidden","placeholderHidden","selectPlaceholder","sortByAttribute","map","indexOf","content","icon","className","forum","text","translator","trans","Component","FieldEditText","oninit","answersForThisField","filter","oninput","createRecord","attributes","relationships","getIdentifier","placeholder","fieldPlaceholder","DiscussionFields","tags","all","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","currentSelectedChild","parent","fieldRequired","fieldLabel","find","FieldGrid","itemsPerChunk","R","slice","chunkArray","row","item","FieldsEditor","fields","answerToFieldIndex","headItems","toArray","component","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","concat","ItemList","add","FieldEditTags","ontagchange","inputAttrs","input","user_values_allowed","description","FieldsEditorModal","masonAnswers","dirty","processing","title","answersChanged","Button","loading","onclick","saveAnswers","save","then","modal","close","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","show","answer_list","show_when_empty","showFieldsOnPost","post","current","matches","DiscussionPage","number","initializers","models","Discussion","canSeeMasonAnswers","Forum","canFillMasonFields","DiscussionComposer","extend","composer","DiscussionHero","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","override","original","model","type"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Button'];","export default function (items, attr = 'sort') {\n    return items.sort(\n        (a, b) => a[attr]() - b[attr]()\n    );\n}\n","module.exports = flarum.core.compat['extend'];","import Model from 'flarum/Model';\n\nexport default class Answer extends Model {\n    content = Model.attribute('content');\n    is_suggested = Model.attribute('is_suggested');\n    sort = Model.attribute('sort');\n    field = Model.hasOne('field');\n\n    apiEndpoint() {\n        return '/fof/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['utils/computed'];","module.exports = flarum.core.compat['utils/ItemList'];","import Model from 'flarum/Model';\nimport computed from 'flarum/utils/computed';\n\nexport default class Field extends Model {\n    name = Model.attribute('name');\n    description = Model.attribute('description');\n    min_answers_count = Model.attribute('min_answers_count');\n    max_answers_count = Model.attribute('max_answers_count');\n    show_when_empty = Model.attribute('show_when_empty');\n    user_values_allowed = Model.attribute('user_values_allowed');\n    validation = Model.attribute('validation');\n    icon = Model.attribute('icon');\n    sort = Model.attribute('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    all_answers = Model.hasMany('all_answers');\n    suggested_answers = Model.hasMany('suggested_answers');\n    required = computed('min_answers_count', min_answers_count => min_answers_count > 0);\n    multiple = computed('max_answers_count', max_answers_count => max_answers_count > 1);\n\n    apiEndpoint() {\n        return '/fof/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['models/Forum'];","module.exports = flarum.core.compat['tags/utils/sortTags'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['components/DiscussionHero'];","module.exports = flarum.core.compat['components/DiscussionPage'];","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\n/* global m */\n\nexport default class FieldEditDropdown extends Component {\n    view(vnode) {\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\n        const {field, answers, onchange} = vnode.attrs;\n\n        let selectedAnswerIdsForThisField = [];\n\n        field.suggested_answers().forEach(answer => {\n            const answerIndex = answers.findIndex(a => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        return m('span.Select', [\n            m('select.Select-input.FormControl', {\n                multiple: field.multiple(),\n                onchange: event => {\n                    let answers = [];\n\n                    for (let option of event.target.options) {\n                        if (option.selected && option.value !== 'none') {\n                            const answerId = option.value;\n\n                            // This will only work with suggested answers for now\n                            // As they are the only ones registered in the store\n                            answers.push(app.store.getById('mason-answers', answerId));\n                        }\n                    }\n\n                    onchange(answers);\n                },\n            }, [\n                (field.multiple() ? null : m('option', {\n                    value: 'none',\n                    selected: selectedAnswerIdsForThisField.length === 0,\n                    disabled: field.required(),\n                    hidden: this.placeholderHidden(field),\n                }, this.selectPlaceholder(field))),\n                sortByAttribute(field.suggested_answers()).map(\n                    answer => m('option', {\n                        value: answer.id(),\n                        selected: selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1,\n                    }, answer.content())\n                ),\n            ]),\n            icon('fas fa-caret-down', {className: 'Select-caret'}),\n        ]);\n    }\n\n    placeholderHidden(field) {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return field.required();\n    }\n\n    selectPlaceholder(field) {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += field.name();\n\n            if (field.required()) {\n                text += ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (field.required()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Component from 'flarum/Component';\n\n/* global m */\n\nexport default class FieldEditText extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.field = this.attrs.field;\n        this.answers = this.attrs.answers;\n        this.onchange = this.attrs.onchange;\n\n        this.content = '';\n\n        const answersForThisField = this.answers.filter(answer => {\n            // Temporary store entries seem to turn into undefined after saving\n            if (typeof answer === 'undefined') {\n                return false;\n            }\n\n            return answer.field().id() === this.field.id();\n        });\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return m('input.FormControl', {\n            required: this.field.required(),\n            value: this.content,\n            oninput: event => {\n                this.content = event.target.value;\n\n                if (this.content === '') {\n                    this.onchange([]);\n                } else {\n                    const answer = app.store.createRecord('mason-answers', {\n                        attributes: {\n                            content: this.content,\n                        },\n                        relationships: {\n                            field: {\n                                data: Model.getIdentifier(this.field),\n                            },\n                        },\n                    });\n\n                    this.onchange([answer]);\n                }\n            },\n            placeholder: this.fieldPlaceholder(),\n        });\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\n\n/* global m */\n\nexport default class DiscussionFields extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.attrs.discussion) {\n            this.tags = this.tags.filter(tag => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.attrs.discussion.tags();\n        } else {\n            this.tags = this.tags.filter(tag => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter(tag => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter(tag => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return m('.Alert', app.translator.trans('fof-mason.forum.tags.inadequate-settings'));\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort(tag => tag.parent() ? -1 : 1)[0].id() : null;\n\n        const required = this.fieldRequired();\n\n        return m('.Mason-Field.Form-group', {\n            className: app.forum.attribute('fof-mason.labels-as-placeholders') ? 'Mason-Field--label-as-placeholder' : '',\n        }, [\n            m('label', this.fieldLabel()),\n            m('span.Select', [\n                m('select.Select-input.FormControl', {\n                    onchange: event => {\n                        const id = event.target.value;\n\n                        this.selectedTags = [];\n\n                        if (id !== 'none') {\n                            this.selectedTags.push(this.tags.find(tag => tag.id() === id));\n\n                            const parent = this.selectedTags[0].parent();\n                            if (parent) {\n                                this.selectedTags.push(parent);\n                            }\n                        }\n\n                        this.attrs.onchange(this.selectedTags);\n                    },\n                }, [\n                    m('option', {\n                        value: 'none',\n                        selected: this.selectedTags.length === 0,\n                        disabled: required,\n                        hidden: this.placeholderHidden(),\n                    }, this.selectPlaceholder()),\n                    this.tags.map(\n                        tag => {\n                            const parent = tag.parent();\n\n                            return m('option', {\n                                value: tag.id(),\n                                selected: tag.id() === currentSelectedChild,\n                            }, (parent ? parent.name() + ' | ' : '') + tag.name());\n                        }\n                    ),\n                ]),\n                icon('fas fa-caret-down', {className: 'Select-caret'}),\n            ]),\n        ]);\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('fof-mason.tags-field-name') || app.translator.trans('fof-mason.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('fof-mason.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('fof-mason.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('fof-mason.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport chunkArray from './../helpers/chunkArray';\n\n/* global m */\n\nexport default class FieldGrid extends Component {\n    view() {\n        return m('.Mason-Grid-Wrapper', m('.Mason-Grid', chunkArray(this.attrs.items, app.forum.attribute('fof-mason.column-count')).map(\n            row => m('.Mason-Row', row.map(\n                item => m('.Mason-Column', item)\n            ))\n        )));\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size\n * Useful for grid layouts\n * @see https://stackoverflow.com/a/10456644/3133038\n * @param {Array} items\n * @param {number} itemsPerChunk\n * @returns {Array}\n */\nexport default function (items, itemsPerChunk) {\n    let R = [];\n    for (let i = 0; i < items.length; i += itemsPerChunk) {\n        R.push(items.slice(i, i + itemsPerChunk));\n    }\n    return R;\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport ItemList from 'flarum/utils/ItemList';\nimport Component from 'flarum/Component';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\n/* global m */\n\nexport default class FieldsEditor extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach(\n            field => {\n                field.suggested_answers().forEach(\n                    answer => {\n                        this.answerToFieldIndex[answer.id()] = field.id();\n                    }\n                );\n            }\n        );\n    }\n\n    view() {\n        return m('.Mason-Fields.Mason-Fields--editor', [\n            this.headItems().toArray(),\n            FieldGrid.component({\n                items: this.fieldItems().toArray(),\n            }),\n        ]);\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter(\n            answer => {\n                const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n                // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n                // In that case the field should be linked in the relationship\n                if (typeof reverseFieldLookup === 'undefined') {\n                    return answer.field().id() !== field.id();\n                }\n\n                return reverseFieldLookup !== field.id();\n            }\n        );\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', m('h5.Mason-Field--title', app.forum.attribute('fof-mason.fields-section-title')));\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('fof-mason.tags-as-fields')) {\n            items.add('tags', FieldEditTags.component({\n                discussion: this.attrs.discussion,\n                onchange: tags => {\n                    if (this.attrs.ontagchange) {\n                        this.attrs.ontagchange(tags);\n                    }\n                },\n            }));\n        }\n\n        this.fields.forEach(field => {\n            const inputAttrs = {\n                field,\n                answers: this.attrs.answers,\n                onchange: fieldAnswers => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = FieldEditText.component(inputAttrs);\n            } else {\n                input = FieldEditDropdown.component(inputAttrs);\n            }\n\n            items.add('field-' + field.id(), m('.Mason-Field.Form-group', {\n                className: app.forum.attribute('fof-mason.labels-as-placeholders') ? 'Mason-Field--label-as-placeholder' : '',\n            }, [\n                m('label', [\n                    (field.icon() ? [icon(field.icon()), ' '] : null),\n                    field.name(),\n                    (field.required() ? ' *' : null),\n                ]),\n                input,\n                (field.description() ? m('.helpText', field.description()) : null),\n            ]));\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport Button from 'flarum/components/Button';\nimport FieldsEditor from './FieldsEditor';\n\n/* global m */\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n\n        // Stays null if the feature is not used\n        this.tags = null;\n    }\n\n    title() {\n        return app.translator.trans('fof-mason.forum.answers-modal.edit-title', {\n            title: m('em', this.attrs.discussion.title()),\n        });\n    }\n\n    content() {\n        return [\n            m('.Modal-body', FieldsEditor.component({\n                discussion: this.attrs.discussion, // Only for the tags feature\n                answers: this.answers,\n                onchange: this.answersChanged.bind(this),\n                ontagchange: tags => {\n                    this.tags = tags;\n                    this.dirty = true;\n                },\n            })),\n            m('.Modal-footer', [\n                Button.component({\n                    className: 'Button Button--primary',\n                    loading: this.processing,\n                    disabled: !this.dirty,\n                    onclick: this.saveAnswers.bind(this),\n                }, app.translator.trans('fof-mason.forum.answers-modal.save')),\n            ]),\n        ];\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let relationships = {\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        if (this.tags !== null) {\n            relationships.tags = this.tags;\n        }\n\n        this.attrs.discussion.save({\n            relationships,\n        }).then(() => {\n            this.processing = false;\n            app.modal.close();\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n            throw err;\n        });\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport ItemList from 'flarum/utils/ItemList';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\n/* global m */\n\nexport default class FieldsViewer extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.attrs.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('fof-mason.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return m('div');\n        }\n\n        return m('.Mason-Fields.Mason-Fields--viewer', [\n            head,\n            FieldGrid.component({\n                items: fields,\n            }),\n        ]);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add('edit', Button.component({\n                className: 'Button Mason-Fields--edit',\n                icon: 'fas fa-pen',\n                onclick: () => app.modal.show(FieldsEditorModal, {\n                    discussion: this.discussion,\n                }),\n            }, app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')));\n        }\n\n        if (app.forum.attribute('fof-mason.fields-section-title')) {\n            items.add('title', m('h5.Mason-Field--title', app.forum.attribute('fof-mason.fields-section-title')));\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach(field => {\n            // Discussion answers to this field\n            const answers = sortByAttribute((this.discussion.masonAnswers() || []).filter(answer => {\n                // It's necessary to compare the field() relationship\n                // Because field.suggested_answers() won't contain new and user answers\n                return answer.field() && answer.field().id() === field.id();\n            }));\n\n            let answer_list = answers.map(answer => m('span.Mason-Inline-Answer', answer.content()));\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(m('em.Mason-Inline-Answer', app.translator.trans('fof-mason.forum.post-answers.no-answer')));\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add('field-' + field.id(), m('.Mason-Field.Form-group', [\n                m('label', [\n                    (field.icon() ? [icon(field.icon()), ' '] : null),\n                    field.name(),\n                ]),\n                m('.FormControl.Mason-Inline-Answers', answer_list),\n            ]));\n        });\n\n        return items;\n    }\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport CommentPost from 'flarum/components/CommentPost';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\n    if (!app.current.matches(DiscussionPage)) {\n        return false;\n    }\n\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('fof-mason.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'oninit', function () {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return (this.attrs.post.discussion().masonAnswers() || []).map(answer => {\n                // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\n                if (!answer) {\n                    return '';\n                }\n\n                // There is a time after discussion.save() is called but before the data included in response is parsed\n                // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\n                // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\n                return JSON.stringify([answer.id(), !!answer.field()]);\n            }).join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex(item => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, FieldsViewer.component({\n            discussion: this.attrs.post.discussion(),\n        }));\n    });\n}\n","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Discussion from 'flarum/models/Discussion';\nimport Forum from 'flarum/models/Forum';\nimport Answer from './../lib/models/Answer';\nimport Field from './../lib/models/Field';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from \"./patchModelIdentifier\";\n\napp.initializers.add('fof-mason', app => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport FieldsEditor from './components/FieldsEditor';\n\nexport default function () {\n    DiscussionComposer.prototype.masonAnswers = [];\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        items.add('mason-fields', FieldsEditor.component({\n            answers: this.masonAnswers,\n            onchange: answers => {\n                this.masonAnswers = answers;\n            },\n            ontagchange: tags => {\n                this.composer.fields.tags = tags;\n            },\n        }));\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.masonAnswers;\n    });\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionHero from 'flarum/components/DiscussionHero';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('fof-mason.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', FieldsViewer.component({\n            discussion: this.attrs.discussion,\n        }));\n    });\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add('mason-update-answers', Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(FieldsEditorModal, {discussion}),\n            }, app.translator.trans('fof-mason.forum.discussion-controls.edit-answers')));\n        }\n    });\n}\n","import {override} from 'flarum/extend';\nimport Model from 'flarum/Model';\nimport Answer from './../lib/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    })\n}\n"],"sourceRoot":""}